const twilio = require('twilio');

// Configuration Twilio
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const fromNumber = process.env.TWILIO_WHATSAPP_FROM || 'whatsapp:+14155238886';

// V√©rifier la configuration Twilio
if (!accountSid || !authToken) {
  console.warn('‚ö†Ô∏è  Configuration Twilio manquante. Les messages WhatsApp ne seront pas envoy√©s.');
}

const client = accountSid && authToken ? twilio(accountSid, authToken) : null;

// Fonction pour valider et formater le num√©ro de t√©l√©phone
function formatPhoneNumber(phoneNumber) {
  // Supprimer tous les espaces, tirets et parenth√®ses
  let cleaned = phoneNumber.replace(/[\s\-\(\)]/g, '');
  
  // Si le num√©ro commence par 0, le remplacer par +221 (S√©n√©gal)
  if (cleaned.startsWith('0')) {
    cleaned = '+221' + cleaned.substring(1);
  }
  
  // Si le num√©ro ne commence pas par +, ajouter +221
  if (!cleaned.startsWith('+')) {
    cleaned = '+221' + cleaned;
  }
  
  return cleaned;
}

async function sendWhatsAppCredentials(to, email, password) {
  // V√©rifier si Twilio est configur√©
  if (!client) {
    console.error('‚ùå Twilio non configur√©. Impossible d\'envoyer le message WhatsApp.');
    throw new Error('Service WhatsApp non configur√©');
  }

  try {
    // Formater le num√©ro de t√©l√©phone
    const formattedNumber = formatPhoneNumber(to);
    
    console.log(`üì± Envoi des identifiants WhatsApp √† ${formattedNumber}...`);
    
    const message = await client.messages.create({
      from: fromNumber,
      to: `whatsapp:${formattedNumber}`,
      body: `üîê Bienvenue sur Calebasse (EpargneCredit) !

Vos identifiants de connexion :
üìß Email : ${email}
üîë Mot de passe : ${password}

‚ö†Ô∏è Veuillez changer votre mot de passe lors de votre premi√®re connexion.

Bonne √©pargne ! üí∞`
    });

    console.log(`‚úÖ Message WhatsApp envoy√© avec succ√®s. SID: ${message.sid}`);
    return message;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi WhatsApp:', error);
    
    // Log plus d√©taill√© selon le type d'erreur
    if (error.code === 21211) {
      console.error('‚ùå Num√©ro de t√©l√©phone invalide:', to);
    } else if (error.code === 63016) {
      console.error('‚ùå Num√©ro non autoris√© dans Twilio Sandbox. Ajoutez le num√©ro dans votre sandbox Twilio.');
    } else if (error.code === 20003) {
      console.error('‚ùå Erreur d\'authentification Twilio. V√©rifiez vos identifiants.');
    }
    
    throw error;
  }
}

// Fonction de test pour v√©rifier la configuration
async function testTwilioConfig() {
  if (!client) {
    return { success: false, message: 'Configuration Twilio manquante' };
  }
  
  try {
    // Tester la configuration en r√©cup√©rant les informations du compte
    const account = await client.api.accounts(accountSid).fetch();
    return { 
      success: true, 
      message: `Configuration Twilio OK. Compte: ${account.friendlyName}` 
    };
  } catch (error) {
    return { 
      success: false, 
      message: `Erreur de configuration Twilio: ${error.message}` 
    };
  }
}

module.exports = { 
  sendWhatsAppCredentials, 
  testTwilioConfig,
  formatPhoneNumber 
};